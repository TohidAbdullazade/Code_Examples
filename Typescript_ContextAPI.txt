import {
  createContext,
  ReactNode,
  useState,
  Dispatch,
  SetStateAction,
  useContext,
} from "react";

interface ContextInterface {
  value: string;
  setValue: Dispatch<SetStateAction<string>>;
}
interface ChildInterface {
  children: ReactNode;
}

const TodoContext = createContext<ContextInterface>({
  value: "",
  setValue: (value) => value,
});

export const TodoContextProvider = ({ children }: ChildInterface) => {
  const [value, setValue] = useState<string>("");
  return (
    <TodoContext.Provider value={{ value, setValue }}>
      {children}
    </TodoContext.Provider>
  );
};

// ===> Custom hook to use the TodoContext <===
export const useTodo = (): ContextInterface => {
    const context = useContext(TodoContext);
    if (context === undefined) {
      throw new Error("useTodo must be used within a TodoContextProvider");
    }
    return context;
  };
 
VARIANT 2.
import {
  createContext,
  Dispatch,
  ReactNode,
  useContext,
  SetStateAction,
  useState,
} from "react";

interface TaskListInterface {
  id: number;
  task: string;
}

interface GlobalInterfaces {
  text: string;
  setText: Dispatch<SetStateAction<string>>;
  taskList: TaskListInterface[];
  setTaskList: Dispatch<SetStateAction<TaskListInterface[]>>;
}

interface TodoContextProviderProps {
  children: ReactNode;
}

const TodoContext = createContext<GlobalInterfaces | null>(null);

export const TodoContextProvider = ({ children }: TodoContextProviderProps) => {
  const [text, setText] = useState<string>("");
  const [taskList, setTaskList] = useState<TaskListInterface[]>([]);

  return (
    <TodoContext.Provider value={{ text, setText, taskList, setTaskList }}>
      {children}
    </TodoContext.Provider>
  );
};

export const useTodo = () => {
  const context = useContext(TodoContext);
  if (!context) {
    throw new Error("useTodo must be used within a TodoContextProvider");
  }
  return context;
};
